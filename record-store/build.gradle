buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.3'
  }
}

plugins {
  id 'java'
  id 'application'
  id 'idea'
  id 'com.github.johnrengelman.shadow' version '8.1.0'
  id "com.google.protobuf" version "0.8.12"
}

group = 'fr.pierrezemb'
version = '1.0.0-SNAPSHOT'

repositories {
  mavenCentral()
}


application {
  mainClassName = 'fr.pierrezemb.recordstore.Launcher'
}

sourceCompatibility = '11'

def mainVerticleName = 'fr.pierrezemb.recordstore.GrpcVerticle'
def mainClassName = 'fr.pierrezemb.recordstore.Launcher'
def watchForChange = 'record-store/**/*'
def doOnChange = './gradlew classes'

dependencies {
  implementation project(':testcontainers-foundationdb')
  implementation "io.vertx:vertx-junit5:$vertxVersion"
  implementation "io.vertx:vertx-grpc:$vertxVersion"
  implementation "io.vertx:vertx-web:$vertxVersion"
  implementation "io.vertx:vertx-junit5-web-client:$vertxVersion"

  implementation "org.foundationdb:fdb-record-layer-core-pb3:$recordLayerVersion"
  implementation "io.vertx:vertx-micrometer-metrics:$vertxVersion"
  implementation "io.micrometer:micrometer-registry-prometheus:1.4.2"
  implementation 'io.vertx:vertx-web-graphql:3.9.0'

  implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

  implementation 'com.clever-cloud:biscuit-java:0.2.6'

  testImplementation "io.vertx:vertx-junit5:$vertxVersion"
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.7.0-M1'

  // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
//  runtimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
  runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.20.0'
  runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.20.0'
  runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.20.0'

  // faker
  implementation 'com.github.javafaker:javafaker:1.0.2'

  // dep from rejoiner
  implementation "com.google.auto.value:auto-value-annotations:${autoValueVersion}"
  annotationProcessor "com.google.auto.value:auto-value:${autoValueVersion}"

  // 1. Use Guava in your implementation only:
  implementation("com.google.guava:guava:29.0-jre")

  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"
}


shadowJar {
//  classifier = 'fat'
  manifest {
    attributes 'Main-Verticle': mainVerticleName
  }
  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }
  dependsOn cleanTest
  testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
  }
}

run {
  args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange", "--conf=./config.json"]
}

protobuf {
  protoc {
    if (osdetector.os == "osx") {
      artifact = 'com.google.protobuf:protoc:3.2.0:osx-x86_64'
    } else {
      artifact = 'com.google.protobuf:protoc:3.2.0'
    }
  }
  plugins {
    grpc {
      if (osdetector.os == "osx") {
        artifact = "io.vertx:protoc-gen-grpc-java:1.25.0:osx-x86_64"
      } else {
        artifact = "io.vertx:protoc-gen-grpc-java:1.25.0"
      }
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc
    }
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:unchecked'
}
